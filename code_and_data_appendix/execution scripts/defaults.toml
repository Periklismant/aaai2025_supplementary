# The default parameter values for each applications packed with RTEC.
# The user may change the values in this file manual or override any subset of the supported parameters by passing arguments to the run_rtec.sh script.

# The parameters supported by RTEC are:
# Execution Parameters: 
#       window_size: The temporal length of windows. The eventRecognition/2 process of 'src/RTEC.prolog' is executed for each temporal window.
#       step: The temporal distance between two consecutive query times.
#       start_time: The first time-point to be processed by RTEC.
#       end_time: The last time-point to be processed by RTEC.
#       clock_tick: the temporal distance between consecutive time-points (keep the default value for supported applications).
# Input Specification Parameters:
#       input_mode: Three possible values: 
#               'csv': RTEC opens the input csv files and asserts the input events in the appropriate window.
#               'fifo': Live stream reasoning. RTEC reads the input events from named pipes and asserts them as soon as they arrive.
#               'socket': Live stream reasoning. RTEC reads the input events from a Unix domain socket and asserts them as soon as they arrive.
#       input_providers: a list of paths from which the event streams will be read. WARNING: must agree with the provided input_mode.
#	stream_rate: the expected rate at which the input streams have been sped up (only for 'fifo' and 'socket' input modes). 
# Knowledge Base:
#       event_description: A Prolog file containing the event description of the domain.
#       background_knowledge: A list of Prolog files containing domain knowledge (e.g., the entities of the domain, threshold values used in patterns, etc).
# Output Specification Parameters:
#       output_mode: RTEC writes the intervals that it computed in a regaular file or into a named pipe.
#               Possible values: "file" and "fifo".
#       results_directory: We write the log and result files of RTEC in this directory.
# Compiler Parameters:
#       dependency_graph_flag: If true, the compiler of RTEC we produce the dependency graph of the event description as a png file.
#       dependency_graph_directory: The directory in which RTEC will store the dependency graph of the event description.
#       include_input: If true, the dependency graph will include both input and output entities. Otherwise, the graph only includes output entities.

[maritime]
# Execution Parameters 
window_size = 3600 # 400000  # 1 day = 86400 seconds
step =  3600 # 400000 # 144000 # 18000 # 72000 # 36000
start_time = 1443650400 
end_time = 1443668400 # 1451650400 # 1447650400 # 1444370400 # 1448834400 # End of Brest dataset: 1459461585 
clock_tick = 1
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/maritime/dataset/csv/brest_critical.csv']
stream_rate = 10000
# Knowledge Base
event_description = '../examples/maritime/resources/patterns/optimised_event_description.prolog'
background_knowledge = ['../examples/maritime/resources/auxiliary/compare.prolog', '../examples/maritime/resources/auxiliary/loadStaticData.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/maritime/results_sdfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/maritime/resources/graphs'
include_input = false

[maritime_sfs]
# Execution Parameters 
window_size = 3600 # 400000 # 1 day = 86400 seconds
step = 3600 # 400000
start_time = 1443650400 
end_time = 1443668400 # 1451650400 # 1447650400 # 1444370400 # 1448834400
clock_tick = 1
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/maritime/dataset/csv/brest_critical.csv']
stream_rate = 10000
# Knowledge Base
event_description = '../examples/maritime/resources/patterns/sfs_exec.prolog'
background_knowledge = ['../examples/maritime/resources/auxiliary/compare.prolog', '../examples/maritime/resources/auxiliary/loadStaticData.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/maritime/results_sfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/maritime/resources/graphs'
include_input = false

[caviar]
# Execution Parameters 
window_size = 30000 # 1007000
step = 30000 # 1007000
start_time = 0
end_time = 1007000 # 1007000
clock_tick = 20 # 40
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/caviar/dataset/csv/appearance.csv', '../examples/caviar/dataset/csv/movementB.csv']
stream_rate = 10000
# Knowledge Base
event_description = '../examples/caviar/resources/patterns/optimised_event_description.prolog'
background_knowledge = ['../examples/caviar/resources/auxiliary/pre-processing.prolog'] #, '../examples/caviar/dataset/auxiliary/list-of-ids.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/caviar/results_sdfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/caviar/resources/graphs'
include_input = false

[caviar_sfs]
# Execution Parameters 
window_size = 30000 # 1007000
step = 30000 # 1007000
start_time = 0
end_time = 1007000
clock_tick = 20 # 40
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/caviar/dataset/csv/appearance.csv', '../examples/caviar/dataset/csv/movementB.csv']
stream_rate = 10000
# Knowledge Base
event_description = '../examples/caviar/resources/patterns/sfs_exec.prolog'
background_knowledge = ['../examples/caviar/resources/auxiliary/pre-processing.prolog'] #, '../examples/caviar/dataset/auxiliary/list-of-ids.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/caviar/results_sfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/caviar/resources/graphs'
include_input = false

[ctm]
# Execution Parameters 
window_size = 10000
step = 10000
start_time = 0
end_time = 50000
clock_tick = 1
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/ctm/dataset/csv/abrupt_acceleration.csv', '../examples/ctm/dataset/csv/abrupt_deceleration.csv', '../examples/ctm/dataset/csv/internal_temperature_change.csv', '../examples/ctm/dataset/csv/noise_level_change.csv'    , '../examples/ctm/dataset/csv/passenger_density_change.csv', '../examples/ctm/dataset/csv/sharp_turn.csv', '../examples/ctm/dataset/csv/stop_enter_leave.csv']
stream_rate = 5000
# Knowledge Base
event_description = '../examples/ctm/resources/patterns/optimised_event_description.prolog'
background_knowledge = ['../examples/ctm/dataset/auxiliary/vehicles.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/ctm/results_sdfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/ctm/resources/graphs'
include_input = false

[ctm_sfs]
# Execution Parameters 
window_size = 10000
step = 10000
start_time = 0
end_time = 50000
clock_tick = 1
# Input Specification Parameters
input_mode = "csv"
input_providers = ['../examples/ctm/dataset/csv/abrupt_acceleration.csv', '../examples/ctm/dataset/csv/abrupt_deceleration.csv', '../examples/ctm/dataset/csv/internal_temperature_change.csv', '../examples/ctm/dataset/csv/noise_level_change.csv'    , '../examples/ctm/dataset/csv/passenger_density_change.csv', '../examples/ctm/dataset/csv/sharp_turn.csv', '../examples/ctm/dataset/csv/stop_enter_leave.csv']
stream_rate = 5000
# Knowledge Base
event_description = '../examples/ctm/resources/patterns/sfs_exec.prolog'
background_knowledge = ['../examples/ctm/dataset/auxiliary/vehicles.prolog']
# Output Specification Parameters
output_mode = "file"
results_directory = "../examples/ctm/results_sfs"
# Compiler Parameters
dependency_graph_flag = false
dependency_graph_directory = '../examples/ctm/resources/graphs'
include_input = false
